{
  "name": {"format": "string", "required": 1},
  "name_dataset": {"format": "string", "__comment":"The name of the dataset as it will be saved in the system", "required": 1},
  "cat": {"format": "Array(string)", "required": 0, "__comment": "Array definisce gerarchia in base al numero di elementi nell'array. If a std_schema is defined, this field is overwritten by std value."},
  "tag": {"format": "Array(string)", "required": 0, "__comment": "Array di elementi di pari grado. If a std_schema is defined, this field is overwritten by std value."},
  "group_own": {"format": "string", "required":0, "__comment": "Group of ownership to which the dataset belongs. It is set to 'open' by default. If a std_schema is defined, this field is overwritten by std value."},
  "owner": {"format": "string", "required": 1},
  "src": {"format": "json", "required": 1, "__comment": "The path and orher info of the incoming dataset", "val":
    {
      "type": {"format": "string", "required": 1},
      "url": {"format": "string", "required": 1},
      "inj_src": {"format": "string", "required": 1, "__comment": "It is the medium through which data get injested into the platform. It can be 'ftp', 'http', 'hdfs'."},
      "table": {"format": "string", "required": 0}
    },
  },
  "std_schema": {"format": "string", "required": 0, "__comment": "Unique name of the standard schema this dataset will be converted into."},
  "fields_conv": {"format": "json", "required": 0, "__comment": "Array containing the conversion from the incoming schema to the vip/standard one.", "val":
    [
      {
        "field_std": {"format": "string", "required": 1, "__comment": "Field name of the desired dataschema chosen"},
        "formula": {"format": "string", "required": 1, "__comment": "Formula to use for conversion from input data source"}
      }
    ]
  },
  "fields_custom": {"format": "json", "required": 0, "__comment": "Additional fields wrt the desired schema", "val":
    [
      {
        "name": {"format": "string", "required": 1},
        "name_lang": {"format": "json", "required": 0, "val":
          {
            "eng": {"format": "string", "required": 0},
            "ita": {"format": "string", "required": 0},
          }
        },
        "formula": {"format": "string", "required": 0},
        "format": {"format": "string", "required": 1},
        "desc": {"format": "string", "required": 1},
        "desc_lang": {"format": "json", "required": 0, "val":
          {
            "eng": {"format": "string", "required": 0},
            "ita": {"format": "string", "required": 0},
          }
        },
        "cat": {"format": "string", "required": 1},
        "tag": {"format": "Array(string)", "required": 0},
        "required": {"format": "integer", "required": 1},
        "constr": {"format": "Array(json)", "required": 0, "__comment": "Constr defines constraints that can be applied to the values of the field", "val":
          [
            {
              "type": {"format": "string", "required": 1},
              "param": {"format": "any", "required": 1, "__comment": "Here param can take different format based on the type of constraint (es. List, String, ecc)"}
            },
          ]
        },
        "src": {"format": "json", "required": 0, "val":
          {
            "type": {"format": "string", "required": 1},
            "url": {"format": "string", "required": 1},
            "table": {"format": "string", "required": 0},
            "val": {"format": "string", "required": 1, "__comment": "Can contain the column, the formula, and so on"},
          },
        },
      }
    ]
  },

}
